import sys

def test(did_pass):
    """  Print the result of a test.  """
    linenum = sys._getframe(1).f_lineno   # Get the caller's line number.
    if did_pass:
        msg = "Test at line {0} ok.".format(linenum)
    else:
        msg = ("Test at line {0} FAILED.".format(linenum))
    print(msg)

def test_suite():
    test(turn_clockwise("N") == "E")
    test(turn_clockwise("W") == "N")
    test(turn_clockwise(42) == None)
    test(turn_clockwise("rubbish") == None)
    test(day_name(3) == "Wednesday")
    test(day_name(6) == "Saturday")
    test(day_name(42) == None)
    test(day_num("Friday") == 5)
    test(day_num("Sunday") == 0)
    test(day_num(day_name(3)) == 3)
    test(day_name(day_num("Thursday")) == "Thursday")
    test(day_add("Monday", 4) ==  "Friday")
    test(day_add("Tuesday", 0) == "Tuesday")
    test(day_add("Tuesday", 14) == "Tuesday")
    test(day_add("Sunday", 100) == "Tuesday")
    test(day_add("Sunday", -1) == "Saturday")
    test(day_add("Sunday", -7) == "Sunday")
    test(day_add("Tuesday", -100) == "Sunday")
    test(days_in_month("February") == 28)
    test(days_in_month("December") == 31)
    test(to_secs(2, 30, 10) == 9010)
    test(to_secs(2, 0, 0) == 7200)
    test(to_secs(0, 2, 0) == 120)
    test(to_secs(0, 0, 42) == 42)
    test(to_secs(0, -10, 10) == -590)
    test(to_secs(2.5, 0, 10.71) == 9010)
    test(to_secs(2.433,0,0) == 8758)
    test(hours_in(9010) == 2)
    test(hours_in(9010) == 2)
    test(minutes_in(9010) == 30)
    test(seconds_in(9010) == 10)
    test(compare(5, 4) == 1)
    test(compare(7, 7) == 0)
    test(compare(2, 3) == -1)
    test(compare(42, 1) == 1)
    test(hypotenuse(3, 4) == 5.0)
    test(hypotenuse(12, 5) == 13.0)
    test(hypotenuse(24, 7) == 25.0)
    test(hypotenuse(9, 12) == 15.0)
    test(slope(5, 3, 4, 2) == 1.0)
    test(slope(1, 2, 3, 2) == 0.0)
    test(slope(1, 2, 3, 3) == 0.5)
    test(slope(2, 4, 1, 2) == 2.0)
    test(intercept(1, 6, 3, 12) == 3.0)
    test(intercept(6, 1, 1, 6) == 7.0)
    test(intercept(4, 6, 12, 8) == 5.0)
    test(is_even(34) == True)
    test(is_even(17) == False)
    test(is_even(127) == False)
    test(is_odd(34) == False)
    test(is_odd(17) == True)
    test(is_odd(127) == True)
    test(is_factor(3, 12))
    test(not is_factor(5, 12))
    test(is_factor(7, 14))
    test(not is_factor(7, 15))
    test(is_factor(1, 15))
    test(is_factor(15, 15))
    test(not is_factor(25, 15))
    test(is_multiple(12, 3))
    test(is_multiple(12, 4))
    test(not is_multiple(12, 5))
    test(is_multiple(12, 6))
    test(not is_multiple(12, 7))
    test(f2c(212) == 100)     # Boiling point of water
    test(f2c(32) == 0)        # Freezing point of water
    test(f2c(-40) == -40)     # Wow, what an interesting case!
    test(f2c(36) == 2)
    test(f2c(37) == 3)
    test(f2c(38) == 3)
    test(f2c(39) == 4)
    test(c2f(0) == 32)
    test(c2f(100) == 212)
    test(c2f(-40) == -40)
    test(c2f(12) == 54)
    test(c2f(18) == 64)
    test(c2f(-48) == -54)

#1. The four compass points can be abbreviated by single-letter strings as “N”, “E”, “S”, and “W”. Write a function turn_clockwise that takes one of these four compass points as its parameter, and returns the next compass point in the clockwise direction. Here are some tests that should pass:

def turn_clockwise(direc):
    direction = ["N","E","S","W","N"]
    for i in range(0,4):
        if direc == direction[i]:
            ndirec = direction[i+1]
            return ndirec

#2. Write a function day_name that converts an integer number 0 to 6 into the name of a day. Assume day 0 is “Sunday”. Once again, return None if the arguments to the function are not valid. Here are some tests that should pass:

def day_name(num):
    dayz = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]
    if num < 7:
        dayzz = dayz[num]
        return dayzz
    else:
        return

#3. Write the inverse function day_num which is given a day name, and returns its number:

def day_num(dnm):
    nooms = [0,1,2,3,4,5,6]
    eh = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]
    if dnm in eh:
        for g in range(0,7):
            if dnm == eh[g]:
                noop = nooms[g]
                return noop
    else:
        return

#4. Write a function that helps answer questions like ‘“Today is Wednesday. I leave on holiday in 19 days time. What day will that be?”’ So the function must take a day name and a delta argument — the number of days to add — and should return the resulting day name:

def day_add(daa, noo):
    daa = day_num(daa)
    nyu = (daa + noo)%7
    bb = day_name(nyu)
    return bb
    
#5. Can your day_add function already work with negative deltas? For example, -1 would be yesterday, or -7 would be a week ago:

# It works because the modulus of a negative number in this situation would produce the same result as adding (7 - the negative number)

#6. Write a function days_in_month which takes the name of a month, and returns the number of days in the month. Ignore leap years:

def days_in_month(moonth):
    mm = ["January","February","March","April","May","June","July","August","September","October","November","December"]
    nm = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    if moonth in mm:
        for j in range(0,12):
            if moonth == mm[j]:
                dm = nm[j]
                return dm
    else:
        return

#7. Write a function to_secs that converts hours, minutes and seconds to a total number of seconds. Here are some tests that should pass:

def to_secs(h, m, s):
    tot = (3600*h)+(60*m)+s
    return tot 

#8. Extend to_secs so that it can cope with real values as inputs. It should always return an integer number of seconds (truncated towards zero):

def to_secs(h, m, s):
    tot = int((3600*h)+(60*m)+s)
    return tot

#9. Write three functions that are the “inverses” of to_secs:

def hours_in(ss):
    hh = (ss - (ss%3600))/3600
    return hh

def minutes_in(sss):
    mmm = ((sss%3600) - ((sss%3600)%60))/60
    return mmm

def seconds_in(ssss):
    sssss = ssss%60
    return sssss

#10. Which of these tests fail? Explain why.

# test(3 % 4 == 0) fails because 3 % 4 == 3
# test(3 % 4 == 3) passes because 3 % 4 == 3
# test(3 / 4 == 0) fails because 3/4 is not equivalent to 0
# test(3 // 4 == 0) passes because the integer result of 3 divided by 4 (originally giving 0.75) is 0
# test(3+4  *  2 == 14) fails because according to BIDMAS, the first calculation to take place is 4 * 2 followed by 3 + 8 which gives 11
# test(4-2+2 == 0) fails because the answer is 4
# test(len("hello, world!") == 13) passes because there are 13 characters in the string "hello, world!"

#11. Write a compare function that returns 1 if a > b, 0 if a == b, and -1 if a < b

def compare(a, b):
    if a > b:
        return 1
    elif a == b:
        return 0
    elif a < b:
        return -1

#12. Write a function called hypotenuse that returns the length of the hypotenuse of a right triangle given the lengths of the two legs as parameters:

def hypotenuse(a, b ):
    c = a**2 + b**2
    c = c**0.5
    return c

#13. Write a function slope(x1, y1, x2, y2) that returns the slope of the line through the points (x1, y1) and (x2, y2). Be sure your implementation of slope can pass the following tests:

def slope(x1, y1, x2, y2):
    grad = (y2 - y1)/(x2 - x1)
    return grad

def intercept(x1, y1, x2, y2):
    grad = (y2 - y1)/(x2 - x1)
    c = y1 - (grad * x1)
    return c

#14. Write a function called is_even(n) that takes an integer as an argument and returns True if the argument is an even number and False if it is odd.

def is_even(n):
    if n%2 == 0:
        return True
    else:
        return False

#15. Now write the function is_odd(n) that returns True when n is odd and False otherwise. Include unit tests for this function too.

def is_odd(n):
    if n%2 == 1:
        return True
    else:
        return False

def is_odd(n):
    er = is_even(n)
    if er == True:
        er = False
        return er
    elif er == False:
        er = True
        return er

#16. Write a function is_factor(f, n) that passes these tests:

def is_factor(f, n):
    if n%f == 0:
        return True
    else:
        return False

#17. Write is_multiple to satisfy these unit tests:

def is_multiple(m, n):
    if m%n == 0:
        return True
    else:
        return False

def is_multiple(m, n):
    rr = is_factor(n,m)
    return rr

#18. Write the function f2c(t) designed to return the integer value of the nearest degree Celsius for given temperature in Fahrenheit. (hint: you may want to make use of the built-in function, round. Try printing round.__doc__ in a Python shell or looking up help for the round function, and experimenting with it until you are comfortable with how it works.)

def f2c(t):
    t = (t-32)*(5/9)
    t = round(t)
    return t

#19. Now do the opposite: write the function c2f which converts Celsius to Fahrenheit:

def c2f(t):
    t = (t*9/5)+32
    t = round(t)
    return t

test_suite()        # Here is the call to run the tests
