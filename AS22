# 1. What is the Python interpreter’s response to the following?

# >>> list(range(10, 0, -2))

# Creates a list with the items 10, 8, 6, 4, 2 which is calculated by appending the new number after being decreased by 2 from 10 (inclusive) to 0 (exclusive)

# The three arguments to the range function are start, stop, and step, respectively. In this example, start is greater than stop. What happens if start < stop and step < 0? Write a rule for the relationships among start, stop, and step.

# If start < stop and step < 0, the range would generate an infinite number of items

# start < stop and step > 0
# OR
# start > stop and step < 0

# 2. Consider this fragment of code:

import turtle

tess = turtle.Turtle()
alex = tess
alex.color("hotpink")

# When alex is equated to tess, the turtle name alex links to turtle tess while the link between the variable tess and the turtle remains unsevered. This allows the turtle to be called by both alex and tess. In conclusion, there is still only one turtle but this turtle can be called using two different names

# 3. Draw a state snapshot for a and b before and after the third line of the following Python code is executed:

a = [1, 2, 3]
b = a[:]     # b is a list with all the copied contents from a however b is not a thus it can be changed without affecting the original list a
# a = [1, 2, 3]
# b = [1, 2, 3]
b[0] = 5
# a = [1, 2, 3]
# b = [5, 2, 3]

# 4. What will be the output of the following program?

this = ["I", "am", "not", "a", "crook"]
that = ["I", "am", "not", "a", "crook"]
print("Test 1: {0}".format(this is that))    # This .format checks if the variable this links directly to the variable that which in case they do not. Although they have the exact same elements, the lists remain seperate.
that = this     # This is linking the variable name that to the list this
print("Test 2: {0}".format(this is that))     # Now that the variable name that has been linked to the list this, this test would return true as the list refers to both this and that are the same thus this is that.

# Provide a detailed explanation of the results.

mport sys

def test(did_pass):
    """  Print the result of a test.  """
    linenum = sys._getframe(1).f_lineno   # Get the caller's line number.
    if did_pass:
        msg = "Test at line {0} ok.".format(linenum)
    else:
        msg = ("Test at line {0} FAILED.".format(linenum))
    print(msg)

# 5. Lists can be used to represent mathematical vectors. In this exercise and several that follow you will write functions to perform standard operations on vectors. Create a script named vectors.py and write Python code to pass the tests in each case.

# Write a function add_vectors(u, v) that takes two lists of numbers of the same length, and returns a new list containing the sums of the corresponding elements of each:

def add_vectors(a,b):
    l = []
    for i in range(0,len(a)):
        l.append(a[i]+b[i])
    return l

test(add_vectors([1, 1], [1, 1]) == [2, 2])
test(add_vectors([1, 2], [1, 4]) == [2, 6])
test(add_vectors([1, 2, 1], [1, 4, 3]) == [2, 6, 4])

# 6. Write a function scalar_mult(s, v) that takes a number, s, and a list, v and returns the scalar multiple of v by s. :

def scalar_mult(s,v):
    l = []
    for i in v:
        l.append(s*i)
    return l

test(scalar_mult(5, [1, 2]) == [5, 10])
test(scalar_mult(3, [1, 0, -1]) == [3, 0, -3])
test(scalar_mult(7, [3, 0, 5, 11, 2]) == [21, 0, 35, 77, 14])

# 7. Write a function dot_product(u, v) that takes two lists of numbers of the same length, and returns the sum of the products of the corresponding elements of each (the dot_product).

def dot_product(u,v):
    total = 0
    for i in range(0,len(u)):
        total += (u[i] * v[i])
    return total

test(dot_product([1, 1], [1, 1]) ==  2)
test(dot_product([1, 2], [1, 4]) ==  9)
test(dot_product([1, 2, 1], [1, 4, 3]) == 12)

# 9. Describe the relationship between " ".join(song.split()) and song in the fragment of code below. Are they the same for all strings assigned to song? When would they be different?

song = "The rain in Spain..."
print(song)
print(" ".join(song.split()))

# When there are multiple spaces in between two letters, " ".join(song.split()) would just replace them with a single space

song = "a b   c"
print(song)
print(" ".join(song.split()))

# 10. Write a function replace(s, old, new) that replaces all occurrences of old with new in a string s:

def replace(s,old,new):
    s = new.join(s.split(old))
    return s

test(replace("Mississippi", "i", "I") == "MIssIssIppI")

s = "I love spom! Spom is my favorite food. Spom, spom, yum!"
test(replace(s, "om", "am") ==
    "I love spam! Spam is my favorite food. Spam, spam, yum!")

test(replace(s, "o", "a") ==
    "I lave spam! Spam is my favarite faad. Spam, spam, yum!")

# 11. Suppose you want to swap around the values in two variables. You decide to factor this out into a reusable function, and write this code:

def swap(x, y):      # Incorrect version
    print("before swap statement: x:", x, "y:", y)
    (x, y) = (y, x)
    print("after swap statement: x:", x, "y:", y)

a = ["This", "is", "fun"]
b = [2,3,4]
print("before swap function call: a:", a, "b:", b)
swap(a, b)
print("after swap function call: a:", a, "b:", b)

# Run this program and describe the results. Oops! So it didn’t do what you intended! Explain why not. Using a Python visualizer like the one at http://netserv.ict.ru.ac.za/python3_viz may help you build a good conceptual model of what is going on. What will be the values of a and b after the call to swap?


